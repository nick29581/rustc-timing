commit 3db197aa9d343c7974b06a9b18ae5f78d5c64637
Merge: 6d5ec58 fbc3f11
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 11 21:19:34 2016 +0000

    Auto merge of #38265 - bluss:mir-deaggregator-loop, r=nagisa
    
    Reinstate while loop in deaggregator pass
    
    A previous commit must have removed the `while let` loop here by
    mistake; for each basic block, it should find and deaggregate multiple
    statements in their index order, and the `curr` index tracks the
    progress through the block.
    
    This fixes both the case of deaggregating statements in separate
    basic blocks (preserving `curr` could prevent that) as well
    as multiple times in the same block (missing loop prevented that).
    
    The loop was lost in commit bda46c21fe30377b9587b584c64ffe99da6c14ce.
rustc: ./syntex-0.42.2@000-base
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.241; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.006; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 147MB	complete gated feature checking
time: 0.023; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.094; rss: 161MB	name resolution
time: 0.121; rss: 193MB	lowering ast -> hir
time: 0.011; rss: 186MB	indexing hir
time: 0.006; rss: 186MB	attribute checking
time: 0.002; rss: 148MB	language item collection
time: 0.012; rss: 148MB	lifetime resolution
time: 0.000; rss: 148MB	looking for entry point
time: 0.000; rss: 148MB	looking for plugin registrar
time: 0.094; rss: 167MB	region resolution
time: 0.008; rss: 167MB	loop checking
time: 0.002; rss: 167MB	static item recursion checking
time: 0.382; rss: 169MB	compute_incremental_hashes_map
time: 0.000; rss: 169MB	load_dep_graph
time: 0.009; rss: 169MB	stability index
time: 0.017; rss: 169MB	stability checking
time: 0.048; rss: 174MB	type collecting
time: 0.002; rss: 174MB	variance inference
time: 0.002; rss: 175MB	impl wf inference
time: 0.017; rss: 176MB	coherence checking
time: 0.084; rss: 179MB	wf checking
time: 0.188; rss: 183MB	item-types checking
time: 3.536; rss: 227MB	item-bodies checking
time: 0.000; rss: 227MB	drop-impl checking
time: 0.319; rss: 237MB	const checking
time: 0.056; rss: 238MB	privacy checking
time: 0.016; rss: 238MB	intrinsic checking
time: 0.014; rss: 238MB	effect checking
time: 0.047; rss: 238MB	match checking
time: 0.050; rss: 244MB	liveness checking
time: 0.175; rss: 244MB	rvalue checking
time: 0.581; rss: 417MB	MIR dump
  time: 0.058; rss: 423MB	SimplifyCfg
  time: 0.074; rss: 423MB	QualifyAndPromoteConstants
  time: 0.108; rss: 423MB	TypeckMir
  time: 0.004; rss: 423MB	SimplifyBranches
  time: 0.031; rss: 424MB	SimplifyCfg
time: 0.276; rss: 424MB	MIR cleanup and validation
time: 0.482; rss: 427MB	borrow checking
time: 0.024; rss: 427MB	reachability checking
time: 0.038; rss: 427MB	death checking
time: 0.000; rss: 427MB	unused lib feature checking
time: 0.177; rss: 427MB	lint checking
time: 0.000; rss: 427MB	resolving dependency formats
  time: 0.003; rss: 427MB	NoLandingPads
  time: 0.027; rss: 427MB	SimplifyCfg
  time: 0.081; rss: 434MB	EraseRegions
  time: 0.011; rss: 434MB	AddCallGuards
  time: 0.313; rss: 456MB	ElaborateDrops
  time: 0.003; rss: 456MB	NoLandingPads
  time: 0.053; rss: 456MB	SimplifyCfg
  time: 0.029; rss: 456MB	InstCombine
  time: 0.012; rss: 456MB	Deaggregator
  time: 0.002; rss: 456MB	CopyPropagation
  time: 0.035; rss: 456MB	SimplifyLocals
  time: 0.010; rss: 456MB	AddCallGuards
  time: 0.003; rss: 456MB	PreTrans
time: 0.583; rss: 456MB	MIR optimisations
  time: 0.082; rss: 465MB	write metadata
  time: 0.403; rss: 478MB	translation item collection
  time: 0.071; rss: 486MB	codegen unit partitioning
  time: 0.054; rss: 741MB	internalize symbols
time: 5.188; rss: 741MB	translation
time: 0.000; rss: 741MB	assert dep graph
time: 0.000; rss: 741MB	serialize dep graph
  time: 0.544; rss: 426MB	llvm function passes [0]
  time: 0.309; rss: 432MB	llvm module passes [0]
  time: 10.489; rss: 423MB	codegen passes [0]
  time: 0.000; rss: 423MB	codegen passes [0]
time: 12.229; rss: 423MB	LLVM passes
time: 0.000; rss: 423MB	serialize work products
time: 0.348; rss: 116MB	linking
done
