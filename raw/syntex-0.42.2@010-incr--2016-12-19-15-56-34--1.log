commit 94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a
Merge: 3f9823d 83453bc
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 19 20:07:49 2016 +0000

    Auto merge of #38072 - nikomatsakis:bootstrap-incremental, r=acrichto
    
    add preliminary support for incremental compilation to rustbuild.py
    
    This implements the integration described in #37929. It requires the use of a local nightly as your bootstrap compiler. The setup is described in `src/bootstrap/README.md`.
    
    This does NOT implement the "copy stage0 libs to stage1" optimization described in #37929, just because that seems orthogonal to me.
    
    In local testing, I do not yet see any incremental re-use when building rustc. I'm not sure why that is, more investigation needed.
    
    (For these reasons, this is not marked as fixing the relevant issue.)
    
    r? @alexcrichton -- I included one random cleanup (`Step::noop()`) that turned out to not be especially relevant. Feel free to tell me you liked it better the old way.
rustc: ./syntex-0.42.2@010-incr
find . -name '*.rs' | xargs touch
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.092; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.312; rss: 152MB	expansion
time: 0.000; rss: 152MB	maybe building test harness
time: 0.007; rss: 152MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 152MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 152MB	complete gated feature checking
time: 0.033; rss: 152MB	early lint checks
time: 0.008; rss: 152MB	AST validation
time: 0.099; rss: 166MB	name resolution
time: 0.065; rss: 200MB	lowering ast -> hir
time: 0.010; rss: 192MB	indexing hir
time: 0.006; rss: 192MB	attribute checking
time: 0.002; rss: 154MB	language item collection
time: 0.011; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.047; rss: 177MB	region resolution
time: 0.008; rss: 177MB	loop checking
time: 0.002; rss: 177MB	static item recursion checking
time: 0.381; rss: 178MB	compute_incremental_hashes_map
time: 0.000; rss: 178MB	load_dep_graph
time: 0.009; rss: 178MB	stability index
time: 0.021; rss: 182MB	stability checking
time: 0.056; rss: 190MB	type collecting
time: 0.004; rss: 190MB	variance inference
time: 0.006; rss: 194MB	impl wf inference
time: 0.026; rss: 198MB	coherence checking
time: 0.089; rss: 200MB	wf checking
time: 0.199; rss: 208MB	item-types checking
time: 3.626; rss: 266MB	item-bodies checking
time: 0.000; rss: 266MB	drop-impl checking
time: 0.224; rss: 277MB	const checking
time: 0.068; rss: 278MB	privacy checking
time: 0.021; rss: 284MB	intrinsic checking
time: 0.016; rss: 284MB	effect checking
time: 0.052; rss: 284MB	match checking
time: 0.050; rss: 291MB	liveness checking
time: 0.184; rss: 293MB	rvalue checking
time: 0.374; rss: 482MB	MIR dump
  time: 0.058; rss: 484MB	SimplifyCfg
  time: 0.076; rss: 484MB	QualifyAndPromoteConstants
  time: 0.123; rss: 500MB	TypeckMir
  time: 0.004; rss: 500MB	SimplifyBranches
  time: 0.032; rss: 500MB	SimplifyCfg
time: 0.294; rss: 500MB	MIR cleanup and validation
time: 0.482; rss: 500MB	borrow checking
time: 0.024; rss: 500MB	reachability checking
time: 0.039; rss: 500MB	death checking
time: 0.000; rss: 500MB	unused lib feature checking
time: 0.177; rss: 500MB	lint checking
time: 0.000; rss: 500MB	resolving dependency formats
  time: 0.004; rss: 500MB	NoLandingPads
  time: 0.027; rss: 500MB	SimplifyCfg
  time: 0.065; rss: 510MB	EraseRegions
  time: 0.011; rss: 510MB	AddCallGuards
  time: 0.272; rss: 529MB	ElaborateDrops
  time: 0.003; rss: 529MB	NoLandingPads
  time: 0.052; rss: 529MB	SimplifyCfg
  time: 0.029; rss: 529MB	InstCombine
  time: 0.012; rss: 529MB	Deaggregator
  time: 0.004; rss: 529MB	CopyPropagation
  time: 0.035; rss: 529MB	SimplifyLocals
  time: 0.010; rss: 529MB	AddCallGuards
  time: 0.003; rss: 529MB	PreTrans
time: 0.527; rss: 529MB	MIR optimisations
  time: 0.066; rss: 538MB	write metadata
  time: 0.395; rss: 551MB	translation item collection
  time: 0.072; rss: 556MB	codegen unit partitioning
  time: 0.052; rss: 1455MB	internalize symbols
time: 13.344; rss: 1455MB	translation
time: 0.000; rss: 1455MB	assert dep graph
time: 2.102; rss: 1483MB	serialize dep graph
incremental: re-using 0 out of 50 modules
time: 0.000; rss: 1198MB	llvm function passes [1]
time: 0.000; rss: 1198MB	llvm module passes [1]
time: 0.001; rss: 1204MB	llvm function passes [0]
time: 0.000; rss: 1204MB	llvm module passes [0]
time: 0.002; rss: 1208MB	llvm function passes [2]
time: 0.000; rss: 1208MB	llvm module passes [2]
time: 0.002; rss: 1209MB	llvm function passes [3]
time: 0.001; rss: 1209MB	codegen passes [1]
time: 0.000; rss: 1209MB	llvm module passes [3]
time: 0.004; rss: 1211MB	llvm function passes [5]
time: 0.002; rss: 1211MB	llvm module passes [5]
time: 0.005; rss: 1211MB	codegen passes [0]
time: 0.001; rss: 1211MB	llvm function passes [0]
time: 0.000; rss: 1211MB	llvm module passes [0]
time: 0.008; rss: 1213MB	codegen passes [2]
time: 0.012; rss: 1213MB	llvm function passes [6]
time: 0.018; rss: 1213MB	llvm function passes [4]
time: 0.006; rss: 1213MB	llvm module passes [6]
time: 0.018; rss: 1217MB	codegen passes [3]
time: 0.009; rss: 1217MB	llvm module passes [4]
time: 0.024; rss: 1227MB	llvm function passes [2]
time: 0.028; rss: 1227MB	codegen passes [0]
time: 0.000; rss: 1233MB	llvm function passes [15]
time: 0.000; rss: 1233MB	llvm module passes [15]
time: 0.004; rss: 1236MB	codegen passes [15]
time: 0.014; rss: 1236MB	llvm module passes [2]
time: 0.032; rss: 1244MB	llvm function passes [12]
time: 0.047; rss: 1248MB	llvm function passes [10]
time: 0.008; rss: 1248MB	llvm module passes [12]
time: 0.009; rss: 1248MB	llvm module passes [10]
time: 0.000; rss: 1248MB	llvm function passes [18]
time: 0.001; rss: 1252MB	llvm module passes [18]
time: 0.004; rss: 1252MB	codegen passes [18]
time: 0.000; rss: 1254MB	llvm function passes [22]
time: 0.000; rss: 1254MB	llvm module passes [22]
time: 0.001; rss: 1254MB	codegen passes [22]
time: 0.052; rss: 1254MB	llvm function passes [20]
time: 0.001; rss: 1254MB	llvm module passes [20]
time: 0.093; rss: 1254MB	codegen passes [5]
time: 0.067; rss: 1254MB	llvm function passes [13]
time: 0.013; rss: 1261MB	llvm module passes [13]
time: 0.127; rss: 1267MB	llvm function passes [1]
time: 0.068; rss: 1267MB	llvm function passes [17]
time: 0.000; rss: 1267MB	llvm module passes [17]
time: 0.060; rss: 1278MB	llvm function passes [21]
time: 0.000; rss: 1278MB	llvm module passes [21]
time: 0.096; rss: 1280MB	llvm function passes [15]
time: 0.061; rss: 1280MB	llvm function passes [14]
time: 0.015; rss: 1284MB	llvm module passes [15]
time: 0.015; rss: 1284MB	llvm module passes [14]
time: 0.026; rss: 1284MB	llvm function passes [26]
time: 0.004; rss: 1284MB	llvm module passes [26]
time: 0.033; rss: 1284MB	llvm function passes [27]
time: 0.115; rss: 1286MB	llvm function passes [9]
time: 0.051; rss: 1288MB	codegen passes [17]
time: 0.027; rss: 1288MB	llvm module passes [27]
time: 0.122; rss: 1288MB	llvm function passes [18]
time: 0.035; rss: 1289MB	llvm module passes [9]
time: 0.041; rss: 1288MB	llvm function passes [17]
time: 0.022; rss: 1288MB	llvm module passes [18]
time: 0.104; rss: 1288MB	llvm function passes [8]
time: 0.210; rss: 1288MB	llvm function passes [3]
time: 0.100; rss: 1287MB	llvm function passes [23]
time: 0.019; rss: 1287MB	llvm module passes [17]
time: 0.009; rss: 1287MB	llvm module passes [23]
time: 0.032; rss: 1287MB	llvm module passes [8]
time: 0.143; rss: 1286MB	llvm module passes [1]
time: 0.288; rss: 1285MB	llvm function passes [7]
time: 0.151; rss: 1285MB	llvm function passes [24]
time: 0.022; rss: 1283MB	llvm function passes [39]
time: 0.087; rss: 1283MB	llvm function passes [33]
time: 0.002; rss: 1283MB	llvm module passes [33]
time: 0.025; rss: 1282MB	llvm module passes [24]
time: 0.014; rss: 1282MB	llvm module passes [39]
time: 0.005; rss: 1282MB	llvm function passes [48]
time: 0.116; rss: 1282MB	llvm module passes [3]
time: 0.014; rss: 1282MB	llvm module passes [48]
time: 0.029; rss: 1282MB	codegen passes [43]
time: 0.077; rss: 1282MB	llvm function passes [37]
time: 0.004; rss: 1280MB	codegen passes [48]
time: 0.346; rss: 1287MB	llvm function passes [19]
time: 0.282; rss: 1288MB	codegen passes [21]
time: 0.360; rss: 1295MB	llvm function passes [22]
time: 0.355; rss: 1296MB	llvm function passes [5]
time: 0.190; rss: 1297MB	llvm function passes [36]
time: 0.145; rss: 1301MB	llvm function passes [31]
time: 0.184; rss: 1301MB	codegen passes [33]
time: 0.477; rss: 1301MB	llvm function passes [11]
time: 0.024; rss: 1301MB	llvm module passes [31]
time: 0.053; rss: 1304MB	llvm module passes [36]
time: 0.436; rss: 1309MB	codegen passes [20]
time: 0.173; rss: 1308MB	llvm function passes [30]
time: 0.509; rss: 1309MB	llvm function passes [0]
time: 0.187; rss: 1309MB	llvm module passes [37]
time: 0.115; rss: 1311MB	llvm module passes [22]
time: 0.439; rss: 1312MB	llvm function passes [25]
time: 0.381; rss: 1316MB	llvm function passes [32]
time: 0.308; rss: 1316MB	llvm function passes [29]
time: 0.471; rss: 1316MB	llvm function passes [28]
time: 0.374; rss: 1315MB	llvm function passes [38]
time: 0.450; rss: 1320MB	llvm function passes [35]
time: 0.240; rss: 1320MB	llvm module passes [5]
time: 0.422; rss: 1322MB	llvm module passes [7]
time: 0.520; rss: 1324MB	llvm function passes [34]
time: 0.204; rss: 1324MB	llvm module passes [30]
time: 0.073; rss: 1324MB	llvm module passes [38]
time: 0.391; rss: 1330MB	llvm module passes [19]
time: 0.483; rss: 1337MB	codegen passes [39]
time: 0.168; rss: 1337MB	llvm module passes [29]
time: 0.461; rss: 1340MB	codegen passes [26]
time: 0.117; rss: 1341MB	llvm module passes [34]
time: 0.370; rss: 1351MB	llvm module passes [25]
time: 0.487; rss: 1354MB	llvm module passes [11]
time: 0.480; rss: 1353MB	llvm module passes [0]
time: 0.410; rss: 1352MB	llvm module passes [32]
time: 1.045; rss: 1350MB	codegen passes [6]
time: 0.476; rss: 1357MB	llvm module passes [28]
time: 0.462; rss: 1359MB	llvm module passes [35]
time: 1.148; rss: 1383MB	codegen passes [4]
time: 1.010; rss: 1394MB	codegen passes [31]
time: 1.422; rss: 1402MB	codegen passes [12]
time: 1.780; rss: 1428MB	codegen passes [2]
time: 1.341; rss: 1426MB	codegen passes [27]
time: 1.742; rss: 1422MB	codegen passes [10]
time: 1.289; rss: 1431MB	codegen passes [30]
time: 1.708; rss: 1430MB	codegen passes [23]
time: 2.222; rss: 1423MB	codegen passes [13]
time: 1.905; rss: 1415MB	codegen passes [37]
time: 2.273; rss: 1405MB	codegen passes [17]
time: 2.209; rss: 1420MB	codegen passes [15]
time: 1.806; rss: 1413MB	codegen passes [29]
time: 2.382; rss: 1427MB	codegen passes [18]
time: 2.733; rss: 1437MB	codegen passes [14]
time: 2.741; rss: 1495MB	codegen passes [24]
time: 2.802; rss: 1491MB	codegen passes [36]
time: 3.064; rss: 1557MB	codegen passes [8]
time: 3.363; rss: 1550MB	codegen passes [9]
time: 3.416; rss: 1531MB	codegen passes [3]
time: 3.636; rss: 1640MB	codegen passes [34]
time: 3.624; rss: 1608MB	codegen passes [19]
time: 4.053; rss: 1592MB	codegen passes [22]
time: 3.826; rss: 1641MB	codegen passes [25]
time: 4.401; rss: 1628MB	codegen passes [1]
time: 4.369; rss: 1591MB	codegen passes [38]
time: 4.540; rss: 1550MB	codegen passes [5]
time: 4.578; rss: 1526MB	codegen passes [32]
time: 4.601; rss: 1500MB	codegen passes [35]
time: 5.037; rss: 1490MB	codegen passes [7]
time: 4.972; rss: 1442MB	codegen passes [11]
time: 5.010; rss: 1368MB	codegen passes [28]
time: 5.709; rss: 1306MB	codegen passes [0]
time: 8.462; rss: 1303MB	LLVM passes
time: 0.000; rss: 1303MB	serialize work products
time: 1.050; rss: 269MB	linking
done
