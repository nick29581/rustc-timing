commit 94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a
Merge: 3f9823d 83453bc
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 19 20:07:49 2016 +0000

    Auto merge of #38072 - nikomatsakis:bootstrap-incremental, r=acrichto
    
    add preliminary support for incremental compilation to rustbuild.py
    
    This implements the integration described in #37929. It requires the use of a local nightly as your bootstrap compiler. The setup is described in `src/bootstrap/README.md`.
    
    This does NOT implement the "copy stage0 libs to stage1" optimization described in #37929, just because that seems orthogonal to me.
    
    In local testing, I do not yet see any incremental re-use when building rustc. I'm not sure why that is, more investigation needed.
    
    (For these reasons, this is not marked as fixing the relevant issue.)
    
    r? @alexcrichton -- I included one random cleanup (`Step::noop()`) that turned out to not be especially relevant. Feel free to tell me you liked it better the old way.
rustc: ./syntex-0.42.2@010-incr
find . -name '*.rs' | xargs touch
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.092; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.241; rss: 151MB	expansion
time: 0.000; rss: 151MB	maybe building test harness
time: 0.006; rss: 151MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 151MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 151MB	complete gated feature checking
time: 0.023; rss: 151MB	early lint checks
time: 0.007; rss: 151MB	AST validation
time: 0.076; rss: 166MB	name resolution
time: 0.059; rss: 199MB	lowering ast -> hir
time: 0.010; rss: 192MB	indexing hir
time: 0.006; rss: 192MB	attribute checking
time: 0.002; rss: 154MB	language item collection
time: 0.011; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.047; rss: 177MB	region resolution
time: 0.008; rss: 177MB	loop checking
time: 0.002; rss: 177MB	static item recursion checking
time: 0.380; rss: 178MB	compute_incremental_hashes_map
time: 0.000; rss: 178MB	load_dep_graph
time: 0.009; rss: 178MB	stability index
time: 0.021; rss: 181MB	stability checking
time: 0.054; rss: 189MB	type collecting
time: 0.004; rss: 189MB	variance inference
time: 0.006; rss: 193MB	impl wf inference
time: 0.025; rss: 196MB	coherence checking
time: 0.089; rss: 199MB	wf checking
time: 0.195; rss: 207MB	item-types checking
time: 3.585; rss: 266MB	item-bodies checking
time: 0.000; rss: 266MB	drop-impl checking
time: 0.220; rss: 276MB	const checking
time: 0.059; rss: 277MB	privacy checking
time: 0.020; rss: 283MB	intrinsic checking
time: 0.016; rss: 283MB	effect checking
time: 0.051; rss: 283MB	match checking
time: 0.050; rss: 290MB	liveness checking
time: 0.179; rss: 293MB	rvalue checking
time: 0.367; rss: 481MB	MIR dump
  time: 0.056; rss: 483MB	SimplifyCfg
  time: 0.075; rss: 483MB	QualifyAndPromoteConstants
  time: 0.119; rss: 500MB	TypeckMir
  time: 0.004; rss: 500MB	SimplifyBranches
  time: 0.031; rss: 500MB	SimplifyCfg
time: 0.301; rss: 500MB	MIR cleanup and validation
time: 0.470; rss: 500MB	borrow checking
time: 0.024; rss: 500MB	reachability checking
time: 0.038; rss: 500MB	death checking
time: 0.000; rss: 500MB	unused lib feature checking
time: 0.182; rss: 500MB	lint checking
time: 0.000; rss: 500MB	resolving dependency formats
  time: 0.003; rss: 500MB	NoLandingPads
  time: 0.027; rss: 500MB	SimplifyCfg
  time: 0.065; rss: 509MB	EraseRegions
  time: 0.011; rss: 509MB	AddCallGuards
  time: 0.274; rss: 529MB	ElaborateDrops
  time: 0.003; rss: 529MB	NoLandingPads
  time: 0.052; rss: 529MB	SimplifyCfg
  time: 0.029; rss: 528MB	InstCombine
  time: 0.012; rss: 528MB	Deaggregator
  time: 0.004; rss: 528MB	CopyPropagation
  time: 0.035; rss: 528MB	SimplifyLocals
  time: 0.010; rss: 528MB	AddCallGuards
  time: 0.003; rss: 528MB	PreTrans
time: 0.528; rss: 528MB	MIR optimisations
  time: 0.065; rss: 537MB	write metadata
  time: 0.393; rss: 549MB	translation item collection
  time: 0.071; rss: 556MB	codegen unit partitioning
  time: 0.053; rss: 1456MB	internalize symbols
time: 12.150; rss: 1456MB	translation
time: 0.000; rss: 1456MB	assert dep graph
time: 2.148; rss: 1484MB	serialize dep graph
incremental: re-using 0 out of 50 modules
time: 0.000; rss: 1194MB	llvm function passes [1]
time: 0.000; rss: 1194MB	llvm module passes [1]
time: 0.001; rss: 1201MB	llvm function passes [0]
time: 0.000; rss: 1201MB	llvm module passes [0]
time: 0.002; rss: 1207MB	llvm function passes [2]
time: 0.000; rss: 1207MB	llvm module passes [2]
time: 0.002; rss: 1207MB	llvm function passes [3]
time: 0.000; rss: 1207MB	llvm module passes [3]
time: 0.002; rss: 1207MB	codegen passes [1]
time: 0.004; rss: 1207MB	llvm function passes [4]
time: 0.005; rss: 1207MB	codegen passes [0]
time: 0.002; rss: 1207MB	llvm module passes [4]
time: 0.007; rss: 1209MB	llvm function passes [6]
time: 0.001; rss: 1209MB	llvm function passes [25]
time: 0.000; rss: 1209MB	llvm module passes [25]
time: 0.008; rss: 1213MB	codegen passes [2]
time: 0.006; rss: 1213MB	llvm module passes [6]
time: 0.017; rss: 1216MB	llvm function passes [5]
time: 0.008; rss: 1220MB	llvm module passes [5]
time: 0.018; rss: 1220MB	llvm function passes [2]
time: 0.014; rss: 1220MB	llvm function passes [18]
time: 0.008; rss: 1220MB	llvm module passes [2]
time: 0.005; rss: 1220MB	llvm module passes [18]
time: 0.033; rss: 1224MB	llvm function passes [24]
time: 0.000; rss: 1237MB	llvm function passes [27]
time: 0.000; rss: 1237MB	llvm module passes [27]
time: 0.014; rss: 1241MB	llvm module passes [24]
time: 0.056; rss: 1241MB	codegen passes [3]
time: 0.004; rss: 1241MB	codegen passes [27]
time: 0.052; rss: 1241MB	codegen passes [25]
time: 0.001; rss: 1247MB	llvm function passes [25]
time: 0.000; rss: 1247MB	llvm function passes [22]
time: 0.000; rss: 1247MB	llvm module passes [25]
time: 0.000; rss: 1247MB	llvm module passes [22]
time: 0.004; rss: 1247MB	codegen passes [22]
time: 0.004; rss: 1249MB	codegen passes [25]
time: 0.060; rss: 1249MB	codegen passes [4]
time: 0.000; rss: 1249MB	llvm function passes [4]
time: 0.000; rss: 1249MB	llvm module passes [4]
time: 0.001; rss: 1253MB	codegen passes [4]
time: 0.041; rss: 1255MB	llvm function passes [19]
time: 0.083; rss: 1255MB	llvm function passes [23]
time: 0.049; rss: 1262MB	llvm function passes [21]
time: 0.005; rss: 1261MB	llvm module passes [21]
time: 0.061; rss: 1264MB	llvm function passes [25]
time: 0.036; rss: 1264MB	llvm module passes [19]
time: 0.132; rss: 1264MB	llvm function passes [1]
time: 0.068; rss: 1264MB	llvm function passes [20]
time: 0.000; rss: 1264MB	llvm module passes [20]
time: 0.059; rss: 1275MB	llvm module passes [23]
time: 0.031; rss: 1275MB	llvm module passes [25]
time: 0.035; rss: 1283MB	codegen passes [20]
time: 0.121; rss: 1284MB	llvm function passes [3]
time: 0.023; rss: 1286MB	llvm function passes [35]
time: 0.102; rss: 1286MB	llvm function passes [31]
time: 0.008; rss: 1286MB	llvm module passes [35]
time: 0.146; rss: 1286MB	llvm function passes [48]
time: 0.252; rss: 1283MB	llvm function passes [0]
time: 0.048; rss: 1283MB	llvm module passes [31]
time: 0.211; rss: 1285MB	llvm function passes [27]
time: 0.113; rss: 1286MB	llvm function passes [34]
time: 0.032; rss: 1286MB	llvm function passes [42]
time: 0.002; rss: 1286MB	llvm module passes [42]
time: 0.144; rss: 1287MB	llvm function passes [32]
time: 0.073; rss: 1283MB	llvm module passes [48]
time: 0.017; rss: 1283MB	llvm module passes [34]
time: 0.239; rss: 1283MB	llvm function passes [22]
time: 0.012; rss: 1283MB	llvm module passes [32]
time: 0.127; rss: 1283MB	llvm module passes [3]
time: 0.084; rss: 1283MB	llvm function passes [40]
time: 0.040; rss: 1283MB	llvm module passes [22]
time: 0.192; rss: 1283MB	llvm function passes [33]
time: 0.235; rss: 1283MB	llvm module passes [1]
time: 0.345; rss: 1283MB	llvm function passes [49]
time: 0.000; rss: 1283MB	llvm function passes [37]
time: 0.000; rss: 1283MB	llvm module passes [37]
time: 0.103; rss: 1283MB	llvm function passes [17]
time: 0.022; rss: 1283MB	llvm module passes [33]
time: 0.095; rss: 1285MB	llvm function passes [16]
time: 0.006; rss: 1285MB	llvm module passes [16]
time: 0.130; rss: 1287MB	llvm function passes [45]
time: 0.014; rss: 1287MB	codegen passes [8]
time: 0.097; rss: 1293MB	llvm module passes [40]
time: 0.021; rss: 1293MB	llvm module passes [45]
time: 0.338; rss: 1295MB	llvm function passes [47]
time: 0.063; rss: 1296MB	codegen passes [37]
time: 0.341; rss: 1297MB	codegen passes [21]
time: 0.197; rss: 1295MB	llvm function passes [43]
time: 0.013; rss: 1297MB	llvm module passes [43]
time: 0.027; rss: 1302MB	llvm function passes [39]
time: 0.006; rss: 1303MB	llvm module passes [39]
time: 0.247; rss: 1303MB	llvm function passes [36]
time: 0.250; rss: 1305MB	llvm module passes [27]
time: 0.430; rss: 1307MB	llvm function passes [46]
time: 0.261; rss: 1308MB	llvm function passes [7]
time: 0.206; rss: 1312MB	llvm module passes [49]
time: 0.511; rss: 1313MB	llvm function passes [4]
time: 0.181; rss: 1314MB	codegen passes [16]
time: 0.532; rss: 1314MB	llvm function passes [15]
time: 0.274; rss: 1314MB	codegen passes [42]
time: 0.314; rss: 1315MB	llvm function passes [44]
time: 0.216; rss: 1316MB	llvm module passes [17]
time: 0.364; rss: 1317MB	llvm function passes [41]
time: 0.124; rss: 1318MB	llvm module passes [36]
time: 0.137; rss: 1335MB	llvm module passes [7]
time: 0.282; rss: 1336MB	llvm function passes [38]
time: 0.195; rss: 1338MB	llvm module passes [46]
time: 0.157; rss: 1338MB	llvm module passes [4]
time: 0.493; rss: 1338MB	llvm module passes [0]
time: 0.586; rss: 1339MB	llvm function passes [20]
time: 0.168; rss: 1340MB	llvm module passes [44]
time: 0.751; rss: 1349MB	codegen passes [6]
time: 0.161; rss: 1354MB	llvm module passes [38]
time: 0.511; rss: 1360MB	llvm module passes [47]
time: 0.393; rss: 1365MB	llvm module passes [41]
time: 1.076; rss: 1384MB	codegen passes [5]
time: 0.850; rss: 1374MB	codegen passes [35]
time: 0.543; rss: 1374MB	llvm module passes [20]
time: 1.164; rss: 1380MB	codegen passes [18]
time: 0.836; rss: 1395MB	llvm module passes [15]
time: 1.300; rss: 1396MB	codegen passes [2]
time: 0.819; rss: 1398MB	codegen passes [39]
time: 0.946; rss: 1399MB	codegen passes [34]
time: 1.097; rss: 1408MB	codegen passes [40]
time: 2.128; rss: 1406MB	codegen passes [24]
time: 1.578; rss: 1395MB	codegen passes [32]
time: 2.150; rss: 1395MB	codegen passes [19]
time: 2.178; rss: 1458MB	codegen passes [25]
time: 1.992; rss: 1457MB	codegen passes [43]
time: 2.000; rss: 1455MB	codegen passes [17]
time: 2.623; rss: 1464MB	codegen passes [3]
time: 2.147; rss: 1464MB	codegen passes [36]
time: 2.445; rss: 1452MB	codegen passes [48]
time: 2.597; rss: 1487MB	codegen passes [45]
time: 2.961; rss: 1538MB	codegen passes [31]
time: 3.154; rss: 1534MB	codegen passes [33]
time: 3.287; rss: 1517MB	codegen passes [23]
time: 3.192; rss: 1559MB	codegen passes [22]
time: 3.957; rss: 1659MB	codegen passes [38]
time: 4.066; rss: 1629MB	codegen passes [4]
time: 4.145; rss: 1632MB	codegen passes [27]
time: 4.234; rss: 1636MB	codegen passes [1]
time: 4.155; rss: 1600MB	codegen passes [46]
time: 4.432; rss: 1561MB	codegen passes [7]
time: 4.705; rss: 1587MB	codegen passes [44]
time: 4.359; rss: 1532MB	codegen passes [41]
time: 4.150; rss: 1479MB	codegen passes [47]
time: 5.087; rss: 1488MB	codegen passes [49]
time: 5.037; rss: 1412MB	codegen passes [0]
time: 4.589; rss: 1364MB	codegen passes [20]
time: 5.281; rss: 1305MB	codegen passes [15]
time: 8.497; rss: 1304MB	LLVM passes
time: 0.000; rss: 1304MB	serialize work products
time: 1.043; rss: 274MB	linking
done
