commit 3db197aa9d343c7974b06a9b18ae5f78d5c64637
Merge: 6d5ec58 fbc3f11
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 11 21:19:34 2016 +0000

    Auto merge of #38265 - bluss:mir-deaggregator-loop, r=nagisa
    
    Reinstate while loop in deaggregator pass
    
    A previous commit must have removed the `while let` loop here by
    mistake; for each basic block, it should find and deaggregate multiple
    statements in their index order, and the `curr` index tracks the
    progress through the block.
    
    This fixes both the case of deaggregating statements in separate
    basic blocks (preserving `curr` could prevent that) as well
    as multiple times in the same block (missing loop prevented that).
    
    The loop was lost in commit bda46c21fe30377b9587b584c64ffe99da6c14ce.
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="""" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 50MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.044; rss: 82MB	expansion
time: 0.000; rss: 82MB	maybe building test harness
time: 0.001; rss: 82MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 82MB	complete gated feature checking
time: 0.003; rss: 82MB	early lint checks
time: 0.001; rss: 82MB	AST validation
time: 0.010; rss: 84MB	name resolution
time: 0.008; rss: 88MB	lowering ast -> hir
time: 0.001; rss: 90MB	indexing hir
time: 0.001; rss: 90MB	attribute checking
time: 0.000; rss: 84MB	language item collection
time: 0.001; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.005; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.000; rss: 89MB	static item recursion checking
time: 0.033; rss: 89MB	compute_incremental_hashes_map
time: 0.000; rss: 89MB	load_dep_graph
time: 0.001; rss: 89MB	stability index
time: 0.002; rss: 89MB	stability checking
time: 0.010; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.000; rss: 91MB	impl wf inference
time: 0.012; rss: 93MB	coherence checking
time: 0.020; rss: 94MB	wf checking
time: 0.114; rss: 98MB	item-types checking
time: 0.296; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.197; rss: 133MB	const checking
time: 0.007; rss: 133MB	privacy checking
time: 0.002; rss: 133MB	intrinsic checking
time: 0.001; rss: 133MB	effect checking
time: 0.005; rss: 133MB	match checking
time: 0.004; rss: 134MB	liveness checking
time: 0.015; rss: 134MB	rvalue checking
time: 0.045; rss: 153MB	MIR dump
  time: 0.006; rss: 154MB	SimplifyCfg
  time: 0.009; rss: 154MB	QualifyAndPromoteConstants
  time: 0.012; rss: 154MB	TypeckMir
  time: 0.000; rss: 154MB	SimplifyBranches
  time: 0.003; rss: 154MB	SimplifyCfg
time: 0.031; rss: 154MB	MIR cleanup and validation
time: 0.046; rss: 155MB	borrow checking
time: 0.001; rss: 155MB	reachability checking
time: 0.004; rss: 155MB	death checking
time: 0.000; rss: 155MB	unused lib feature checking
time: 0.028; rss: 155MB	lint checking
time: 0.000; rss: 155MB	resolving dependency formats
  time: 0.000; rss: 155MB	NoLandingPads
  time: 0.003; rss: 155MB	SimplifyCfg
  time: 0.008; rss: 156MB	EraseRegions
  time: 0.001; rss: 156MB	AddCallGuards
  time: 0.017; rss: 157MB	ElaborateDrops
  time: 0.000; rss: 157MB	NoLandingPads
  time: 0.004; rss: 157MB	SimplifyCfg
  time: 0.003; rss: 157MB	InstCombine
  time: 0.002; rss: 157MB	Deaggregator
  time: 0.000; rss: 157MB	CopyPropagation
  time: 0.004; rss: 157MB	SimplifyLocals
  time: 0.001; rss: 157MB	AddCallGuards
  time: 0.000; rss: 157MB	PreTrans
time: 0.044; rss: 157MB	MIR optimisations
  time: 0.008; rss: 159MB	write metadata
  time: 0.086; rss: 164MB	translation item collection
  time: 0.013; rss: 166MB	codegen unit partitioning
  time: 0.012; rss: 223MB	internalize symbols
time: 0.970; rss: 223MB	translation
time: 0.000; rss: 223MB	assert dep graph
time: 0.000; rss: 223MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.085; rss: 142MB	llvm function passes [0]
  time: 0.432; rss: 176MB	llvm module passes [0]
  time: 2.515; rss: 184MB	codegen passes [0]
  time: 0.000; rss: 184MB	codegen passes [0]
time: 3.259; rss: 184MB	LLVM passes
time: 0.000; rss: 184MB	serialize work products
time: 0.120; rss: 94MB	linking
done
