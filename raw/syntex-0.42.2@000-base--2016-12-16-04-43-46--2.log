commit d250169cb5a96481a3e7c8f9fe05de49f60e5ae5
Merge: c6d8ab0 96a5fc7
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 16 07:26:41 2016 +0000

    Auto merge of #38359 - alexcrichton:sccache, r=brson
    
    rustbuild: Add sccache support
    
    This commit adds support for sccache, a ccache-like compiler which works on MSVC
    and stores results into an S3 bucket. This also switches over all Travis and
    AppVeyor automation to using sccache to ensure a shared and unified cache over
    time which can be shared across builders.
    
    The support for sccache manifests as a new `--enable-sccache` option which
    instructs us to configure LLVM differently to use a 'sccache' binary instead of
    a 'ccache' binary. All docker images for Travis builds are updated to download
    Mozilla's tooltool builds of sccache onto various containers and systems.
    Additionally a new `rust-lang-ci-sccache` bucket is configured to hold all of
    our ccache goodies.
    
    ---
    
    Note that this does not currently change Windows [due to previously written up issues](https://github.com/rust-lang/rust/issues/38119#issuecomment-266631585). Despite that, however, I was curious to get timings for the builds on Travis to see what ranges we're working with. As a result, this is a WIP PR I'm using to gauge build times and such.
rustc: ./syntex-0.42.2@000-base
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
time: 0.092; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.241; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.075; rss: 161MB	name resolution
time: 0.058; rss: 195MB	lowering ast -> hir
time: 0.009; rss: 187MB	indexing hir
time: 0.006; rss: 187MB	attribute checking
time: 0.002; rss: 149MB	language item collection
time: 0.011; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.045; rss: 169MB	region resolution
time: 0.007; rss: 169MB	loop checking
time: 0.002; rss: 169MB	static item recursion checking
time: 0.381; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.008; rss: 171MB	stability index
time: 0.016; rss: 171MB	stability checking
time: 0.046; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.002; rss: 176MB	impl wf inference
time: 0.017; rss: 178MB	coherence checking
time: 0.085; rss: 180MB	wf checking
time: 0.184; rss: 184MB	item-types checking
time: 3.373; rss: 235MB	item-bodies checking
time: 0.000; rss: 235MB	drop-impl checking
time: 0.207; rss: 244MB	const checking
time: 0.054; rss: 245MB	privacy checking
time: 0.016; rss: 245MB	intrinsic checking
time: 0.013; rss: 245MB	effect checking
time: 0.046; rss: 245MB	match checking
time: 0.045; rss: 251MB	liveness checking
time: 0.168; rss: 251MB	rvalue checking
time: 0.357; rss: 441MB	MIR dump
  time: 0.056; rss: 443MB	SimplifyCfg
  time: 0.073; rss: 443MB	QualifyAndPromoteConstants
  time: 0.107; rss: 443MB	TypeckMir
  time: 0.004; rss: 443MB	SimplifyBranches
  time: 0.030; rss: 443MB	SimplifyCfg
time: 0.270; rss: 443MB	MIR cleanup and validation
time: 0.461; rss: 444MB	borrow checking
time: 0.024; rss: 444MB	reachability checking
time: 0.037; rss: 444MB	death checking
time: 0.000; rss: 444MB	unused lib feature checking
time: 0.170; rss: 444MB	lint checking
time: 0.000; rss: 444MB	resolving dependency formats
  time: 0.003; rss: 444MB	NoLandingPads
  time: 0.026; rss: 444MB	SimplifyCfg
  time: 0.063; rss: 452MB	EraseRegions
  time: 0.010; rss: 452MB	AddCallGuards
  time: 0.269; rss: 474MB	ElaborateDrops
  time: 0.003; rss: 474MB	NoLandingPads
  time: 0.052; rss: 474MB	SimplifyCfg
  time: 0.028; rss: 474MB	InstCombine
  time: 0.012; rss: 474MB	Deaggregator
  time: 0.002; rss: 474MB	CopyPropagation
  time: 0.033; rss: 474MB	SimplifyLocals
  time: 0.009; rss: 474MB	AddCallGuards
  time: 0.002; rss: 474MB	PreTrans
time: 0.513; rss: 474MB	MIR optimisations
  time: 0.063; rss: 482MB	write metadata
  time: 0.386; rss: 495MB	translation item collection
  time: 0.060; rss: 499MB	codegen unit partitioning
  time: 0.046; rss: 756MB	internalize symbols
time: 4.575; rss: 756MB	translation
time: 0.000; rss: 756MB	assert dep graph
time: 0.000; rss: 756MB	serialize dep graph
  time: 0.524; rss: 428MB	llvm function passes [0]
  time: 0.292; rss: 433MB	llvm module passes [0]
  time: 10.568; rss: 435MB	codegen passes [0]
  time: 0.000; rss: 435MB	codegen passes [0]
time: 12.190; rss: 435MB	LLVM passes
time: 0.000; rss: 435MB	serialize work products
time: 0.341; rss: 117MB	linking
done
