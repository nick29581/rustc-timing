commit 94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a
Merge: 3f9823d 83453bc
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 19 20:07:49 2016 +0000

    Auto merge of #38072 - nikomatsakis:bootstrap-incremental, r=acrichto
    
    add preliminary support for incremental compilation to rustbuild.py
    
    This implements the integration described in #37929. It requires the use of a local nightly as your bootstrap compiler. The setup is described in `src/bootstrap/README.md`.
    
    This does NOT implement the "copy stage0 libs to stage1" optimization described in #37929, just because that seems orthogonal to me.
    
    In local testing, I do not yet see any incremental re-use when building rustc. I'm not sure why that is, more investigation needed.
    
    (For these reasons, this is not marked as fixing the relevant issue.)
    
    r? @alexcrichton -- I included one random cleanup (`Step::noop()`) that turned out to not be especially relevant. Feel free to tell me you liked it better the old way.
rustc: ./syntex-0.42.2@010-incr
find . -name '*.rs' | xargs touch
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.094; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.242; rss: 151MB	expansion
time: 0.000; rss: 151MB	maybe building test harness
time: 0.006; rss: 151MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 151MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 151MB	complete gated feature checking
time: 0.023; rss: 151MB	early lint checks
time: 0.007; rss: 151MB	AST validation
time: 0.075; rss: 166MB	name resolution
time: 0.058; rss: 200MB	lowering ast -> hir
time: 0.010; rss: 192MB	indexing hir
time: 0.006; rss: 192MB	attribute checking
time: 0.002; rss: 154MB	language item collection
time: 0.011; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.046; rss: 177MB	region resolution
time: 0.007; rss: 177MB	loop checking
time: 0.002; rss: 177MB	static item recursion checking
time: 0.381; rss: 178MB	compute_incremental_hashes_map
time: 0.000; rss: 178MB	load_dep_graph
time: 0.009; rss: 178MB	stability index
time: 0.019; rss: 182MB	stability checking
time: 0.054; rss: 189MB	type collecting
time: 0.004; rss: 189MB	variance inference
time: 0.006; rss: 193MB	impl wf inference
time: 0.025; rss: 197MB	coherence checking
time: 0.088; rss: 199MB	wf checking
time: 0.195; rss: 207MB	item-types checking
time: 3.575; rss: 265MB	item-bodies checking
time: 0.000; rss: 265MB	drop-impl checking
time: 0.217; rss: 276MB	const checking
time: 0.057; rss: 277MB	privacy checking
time: 0.020; rss: 283MB	intrinsic checking
time: 0.016; rss: 283MB	effect checking
time: 0.049; rss: 283MB	match checking
time: 0.049; rss: 291MB	liveness checking
time: 0.177; rss: 293MB	rvalue checking
time: 0.358; rss: 481MB	MIR dump
  time: 0.057; rss: 483MB	SimplifyCfg
  time: 0.074; rss: 483MB	QualifyAndPromoteConstants
  time: 0.120; rss: 499MB	TypeckMir
  time: 0.004; rss: 499MB	SimplifyBranches
  time: 0.031; rss: 499MB	SimplifyCfg
time: 0.286; rss: 499MB	MIR cleanup and validation
time: 0.476; rss: 500MB	borrow checking
time: 0.024; rss: 500MB	reachability checking
time: 0.038; rss: 500MB	death checking
time: 0.000; rss: 500MB	unused lib feature checking
time: 0.178; rss: 500MB	lint checking
time: 0.000; rss: 500MB	resolving dependency formats
  time: 0.004; rss: 500MB	NoLandingPads
  time: 0.027; rss: 500MB	SimplifyCfg
  time: 0.064; rss: 509MB	EraseRegions
  time: 0.011; rss: 509MB	AddCallGuards
  time: 0.277; rss: 531MB	ElaborateDrops
  time: 0.004; rss: 531MB	NoLandingPads
  time: 0.053; rss: 530MB	SimplifyCfg
  time: 0.029; rss: 530MB	InstCombine
  time: 0.012; rss: 530MB	Deaggregator
  time: 0.004; rss: 530MB	CopyPropagation
  time: 0.035; rss: 530MB	SimplifyLocals
  time: 0.010; rss: 530MB	AddCallGuards
  time: 0.003; rss: 530MB	PreTrans
time: 0.531; rss: 530MB	MIR optimisations
  time: 0.064; rss: 537MB	write metadata
  time: 0.395; rss: 551MB	translation item collection
  time: 0.071; rss: 553MB	codegen unit partitioning
  time: 0.048; rss: 1457MB	internalize symbols
time: 11.762; rss: 1457MB	translation
time: 0.000; rss: 1457MB	assert dep graph
time: 1.365; rss: 1485MB	serialize dep graph
incremental: re-using 0 out of 50 modules
time: 0.000; rss: 1195MB	llvm function passes [0]
time: 0.000; rss: 1199MB	llvm module passes [0]
time: 0.001; rss: 1204MB	llvm function passes [2]
time: 0.000; rss: 1204MB	llvm module passes [2]
time: 0.002; rss: 1210MB	llvm function passes [1]
time: 0.000; rss: 1210MB	llvm module passes [1]
time: 0.003; rss: 1210MB	llvm function passes [3]
time: 0.000; rss: 1210MB	llvm module passes [3]
time: 0.003; rss: 1210MB	llvm function passes [5]
time: 0.003; rss: 1212MB	llvm module passes [5]
time: 0.005; rss: 1212MB	codegen passes [0]
time: 0.001; rss: 1212MB	llvm function passes [0]
time: 0.000; rss: 1212MB	llvm module passes [0]
time: 0.008; rss: 1212MB	codegen passes [2]
time: 0.012; rss: 1214MB	codegen passes [1]
time: 0.011; rss: 1214MB	llvm function passes [7]
time: 0.016; rss: 1214MB	llvm function passes [4]
time: 0.006; rss: 1216MB	llvm module passes [7]
time: 0.006; rss: 1216MB	llvm module passes [4]
time: 0.018; rss: 1220MB	llvm function passes [1]
time: 0.024; rss: 1220MB	llvm function passes [2]
time: 0.032; rss: 1224MB	codegen passes [0]
time: 0.008; rss: 1224MB	llvm module passes [1]
time: 0.009; rss: 1224MB	llvm module passes [2]
time: 0.038; rss: 1224MB	codegen passes [3]
time: 0.013; rss: 1234MB	llvm function passes [0]
time: 0.008; rss: 1237MB	llvm module passes [0]
time: 0.003; rss: 1250MB	llvm function passes [13]
time: 0.001; rss: 1252MB	llvm module passes [13]
time: 0.000; rss: 1252MB	llvm function passes [12]
time: 0.000; rss: 1252MB	llvm module passes [12]
time: 0.004; rss: 1258MB	codegen passes [12]
time: 0.068; rss: 1260MB	codegen passes [5]
time: 0.001; rss: 1264MB	llvm function passes [15]
time: 0.000; rss: 1264MB	llvm module passes [15]
time: 0.081; rss: 1270MB	llvm function passes [9]
time: 0.028; rss: 1273MB	llvm function passes [5]
time: 0.000; rss: 1273MB	llvm module passes [5]
time: 0.023; rss: 1275MB	codegen passes [15]
time: 0.000; rss: 1275MB	llvm function passes [15]
time: 0.000; rss: 1275MB	llvm module passes [15]
time: 0.005; rss: 1272MB	codegen passes [15]
time: 0.010; rss: 1272MB	codegen passes [5]
time: 0.000; rss: 1272MB	llvm function passes [5]
time: 0.000; rss: 1272MB	llvm module passes [5]
time: 0.001; rss: 1274MB	codegen passes [5]
time: 0.090; rss: 1277MB	llvm function passes [3]
time: 0.038; rss: 1283MB	llvm function passes [16]
time: 0.014; rss: 1283MB	llvm module passes [16]
time: 0.096; rss: 1285MB	llvm function passes [12]
time: 0.069; rss: 1285MB	llvm module passes [9]
time: 0.061; rss: 1292MB	llvm function passes [15]
time: 0.015; rss: 1294MB	llvm module passes [12]
time: 0.108; rss: 1294MB	codegen passes [13]
time: 0.063; rss: 1295MB	llvm module passes [3]
time: 0.080; rss: 1295MB	llvm function passes [17]
time: 0.206; rss: 1295MB	llvm function passes [6]
time: 0.134; rss: 1295MB	llvm function passes [14]
time: 0.032; rss: 1295MB	llvm module passes [15]
time: 0.038; rss: 1314MB	llvm module passes [17]
time: 0.033; rss: 1320MB	llvm function passes [33]
time: 0.003; rss: 1320MB	llvm module passes [33]
time: 0.263; rss: 1320MB	llvm function passes [8]
time: 0.095; rss: 1332MB	llvm module passes [6]
time: 0.281; rss: 1337MB	llvm function passes [11]
time: 0.185; rss: 1337MB	llvm function passes [18]
time: 0.120; rss: 1337MB	llvm function passes [19]
time: 0.099; rss: 1343MB	llvm function passes [32]
time: 0.008; rss: 1343MB	llvm module passes [32]
time: 0.039; rss: 1345MB	llvm module passes [19]
time: 0.127; rss: 1345MB	llvm function passes [20]
time: 0.150; rss: 1345MB	llvm module passes [14]
time: 0.024; rss: 1350MB	llvm module passes [20]
time: 0.099; rss: 1350MB	llvm function passes [22]
time: 0.009; rss: 1353MB	llvm module passes [22]
time: 0.017; rss: 1353MB	llvm function passes [28]
time: 0.000; rss: 1353MB	llvm module passes [28]
time: 0.000; rss: 1357MB	codegen passes [41]
time: 0.097; rss: 1376MB	llvm module passes [18]
time: 0.276; rss: 1376MB	llvm function passes [23]
time: 0.166; rss: 1379MB	llvm module passes [8]
time: 0.147; rss: 1383MB	llvm module passes [11]
time: 0.115; rss: 1394MB	codegen passes [28]
time: 0.098; rss: 1394MB	llvm module passes [23]
time: 0.146; rss: 1404MB	llvm function passes [29]
time: 0.150; rss: 1407MB	llvm function passes [26]
time: 0.200; rss: 1409MB	llvm function passes [39]
time: 0.199; rss: 1409MB	llvm function passes [36]
time: 0.222; rss: 1409MB	llvm function passes [35]
time: 0.021; rss: 1409MB	llvm module passes [29]
time: 0.028; rss: 1406MB	llvm module passes [26]
time: 0.347; rss: 1408MB	llvm function passes [21]
time: 0.287; rss: 1409MB	llvm function passes [34]
time: 0.056; rss: 1409MB	llvm module passes [35]
time: 0.058; rss: 1409MB	llvm module passes [36]
time: 0.221; rss: 1409MB	llvm function passes [27]
time: 0.554; rss: 1409MB	llvm function passes [10]
time: 0.095; rss: 1405MB	llvm module passes [39]
time: 0.300; rss: 1404MB	llvm function passes [31]
time: 0.210; rss: 1403MB	llvm function passes [37]
time: 0.068; rss: 1420MB	llvm module passes [27]
time: 0.558; rss: 1420MB	llvm function passes [5]
time: 0.378; rss: 1417MB	codegen passes [33]
time: 0.083; rss: 1417MB	llvm module passes [34]
time: 0.041; rss: 1410MB	llvm module passes [37]
time: 0.122; rss: 1410MB	llvm module passes [21]
time: 0.347; rss: 1402MB	llvm function passes [24]
time: 0.425; rss: 1416MB	llvm function passes [25]
time: 0.123; rss: 1419MB	llvm module passes [31]
time: 0.619; rss: 1420MB	llvm function passes [13]
time: 0.108; rss: 1418MB	llvm module passes [24]
time: 0.154; rss: 1419MB	llvm module passes [5]
time: 0.255; rss: 1423MB	codegen passes [26]
time: 0.836; rss: 1425MB	codegen passes [7]
time: 0.139; rss: 1434MB	llvm module passes [13]
time: 0.247; rss: 1432MB	codegen passes [37]
time: 0.366; rss: 1433MB	llvm module passes [25]
time: 0.706; rss: 1450MB	llvm module passes [10]
time: 1.247; rss: 1467MB	codegen passes [1]
time: 1.378; rss: 1479MB	codegen passes [4]
time: 1.446; rss: 1472MB	codegen passes [0]
time: 1.549; rss: 1475MB	codegen passes [2]
time: 0.896; rss: 1438MB	codegen passes [27]
time: 1.163; rss: 1434MB	codegen passes [32]
time: 1.220; rss: 1430MB	codegen passes [31]
time: 1.770; rss: 1435MB	codegen passes [22]
time: 1.689; rss: 1424MB	codegen passes [3]
time: 1.765; rss: 1423MB	codegen passes [12]
time: 1.936; rss: 1446MB	codegen passes [29]
time: 2.145; rss: 1449MB	codegen passes [16]
time: 2.033; rss: 1461MB	codegen passes [39]
time: 1.771; rss: 1457MB	codegen passes [13]
time: 2.508; rss: 1513MB	codegen passes [20]
time: 2.655; rss: 1508MB	codegen passes [17]
time: 2.599; rss: 1542MB	codegen passes [24]
time: 3.163; rss: 1602MB	codegen passes [9]
time: 3.412; rss: 1622MB	codegen passes [19]
time: 3.747; rss: 1652MB	codegen passes [15]
time: 3.328; rss: 1654MB	codegen passes [35]
time: 3.717; rss: 1673MB	codegen passes [14]
time: 3.577; rss: 1651MB	codegen passes [5]
time: 4.621; rss: 1662MB	codegen passes [6]
time: 4.074; rss: 1660MB	codegen passes [36]
time: 4.281; rss: 1592MB	codegen passes [18]
time: 4.131; rss: 1556MB	codegen passes [23]
time: 4.675; rss: 1599MB	codegen passes [34]
time: 4.787; rss: 1565MB	codegen passes [25]
time: 4.555; rss: 1493MB	codegen passes [11]
time: 4.581; rss: 1443MB	codegen passes [8]
time: 5.246; rss: 1388MB	codegen passes [21]
time: 5.446; rss: 1318MB	codegen passes [10]
time: 7.554; rss: 1318MB	LLVM passes
time: 0.000; rss: 1318MB	serialize work products
time: 1.045; rss: 284MB	linking
done
