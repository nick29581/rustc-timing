commit 3db197aa9d343c7974b06a9b18ae5f78d5c64637
Merge: 6d5ec58 fbc3f11
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 11 21:19:34 2016 +0000

    Auto merge of #38265 - bluss:mir-deaggregator-loop, r=nagisa
    
    Reinstate while loop in deaggregator pass
    
    A previous commit must have removed the `while let` loop here by
    mistake; for each basic block, it should find and deaggregate multiple
    statements in their index order, and the `curr` index tracks the
    progress through the block.
    
    This fixes both the case of deaggregating statements in separate
    basic blocks (preserving `curr` could prevent that) as well
    as multiple times in the same block (missing loop prevented that).
    
    The loop was lost in commit bda46c21fe30377b9587b584c64ffe99da6c14ce.
rustc: ./syntex-0.42.2@000-base
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.240; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.074; rss: 161MB	name resolution
time: 0.058; rss: 194MB	lowering ast -> hir
time: 0.009; rss: 187MB	indexing hir
time: 0.006; rss: 187MB	attribute checking
time: 0.002; rss: 149MB	language item collection
time: 0.011; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.046; rss: 169MB	region resolution
time: 0.007; rss: 169MB	loop checking
time: 0.002; rss: 169MB	static item recursion checking
time: 0.503; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.010; rss: 171MB	stability index
time: 0.020; rss: 171MB	stability checking
time: 0.047; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.002; rss: 176MB	impl wf inference
time: 0.017; rss: 177MB	coherence checking
time: 0.086; rss: 179MB	wf checking
time: 0.186; rss: 184MB	item-types checking
time: 3.403; rss: 234MB	item-bodies checking
time: 0.000; rss: 234MB	drop-impl checking
time: 0.210; rss: 244MB	const checking
time: 0.054; rss: 244MB	privacy checking
time: 0.015; rss: 244MB	intrinsic checking
time: 0.013; rss: 244MB	effect checking
time: 0.046; rss: 244MB	match checking
time: 0.045; rss: 250MB	liveness checking
time: 0.172; rss: 250MB	rvalue checking
time: 0.513; rss: 432MB	MIR dump
  time: 0.058; rss: 437MB	SimplifyCfg
  time: 0.074; rss: 437MB	QualifyAndPromoteConstants
  time: 0.107; rss: 437MB	TypeckMir
  time: 0.004; rss: 437MB	SimplifyBranches
  time: 0.030; rss: 437MB	SimplifyCfg
time: 0.274; rss: 437MB	MIR cleanup and validation
time: 0.475; rss: 440MB	borrow checking
time: 0.024; rss: 440MB	reachability checking
time: 0.037; rss: 440MB	death checking
time: 0.000; rss: 440MB	unused lib feature checking
time: 0.173; rss: 440MB	lint checking
time: 0.000; rss: 440MB	resolving dependency formats
  time: 0.003; rss: 440MB	NoLandingPads
  time: 0.026; rss: 440MB	SimplifyCfg
  time: 0.079; rss: 447MB	EraseRegions
  time: 0.011; rss: 447MB	AddCallGuards
  time: 0.313; rss: 465MB	ElaborateDrops
  time: 0.003; rss: 465MB	NoLandingPads
  time: 0.053; rss: 465MB	SimplifyCfg
  time: 0.029; rss: 464MB	InstCombine
  time: 0.012; rss: 464MB	Deaggregator
  time: 0.002; rss: 464MB	CopyPropagation
  time: 0.035; rss: 464MB	SimplifyLocals
  time: 0.009; rss: 464MB	AddCallGuards
  time: 0.002; rss: 464MB	PreTrans
time: 0.578; rss: 464MB	MIR optimisations
  time: 0.086; rss: 471MB	write metadata
  time: 0.407; rss: 484MB	translation item collection
  time: 0.063; rss: 489MB	codegen unit partitioning
  time: 0.054; rss: 744MB	internalize symbols
time: 5.197; rss: 744MB	translation
time: 0.000; rss: 744MB	assert dep graph
time: 0.000; rss: 744MB	serialize dep graph
  time: 0.537; rss: 425MB	llvm function passes [0]
  time: 0.309; rss: 432MB	llvm module passes [0]
  time: 10.449; rss: 433MB	codegen passes [0]
  time: 0.000; rss: 433MB	codegen passes [0]
time: 12.131; rss: 433MB	LLVM passes
time: 0.000; rss: 433MB	serialize work products
time: 0.344; rss: 116MB	linking
done
