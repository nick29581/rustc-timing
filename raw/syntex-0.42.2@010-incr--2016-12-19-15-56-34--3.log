commit 94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a
Merge: 3f9823d 83453bc
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 19 20:07:49 2016 +0000

    Auto merge of #38072 - nikomatsakis:bootstrap-incremental, r=acrichto
    
    add preliminary support for incremental compilation to rustbuild.py
    
    This implements the integration described in #37929. It requires the use of a local nightly as your bootstrap compiler. The setup is described in `src/bootstrap/README.md`.
    
    This does NOT implement the "copy stage0 libs to stage1" optimization described in #37929, just because that seems orthogonal to me.
    
    In local testing, I do not yet see any incremental re-use when building rustc. I'm not sure why that is, more investigation needed.
    
    (For these reasons, this is not marked as fixing the relevant issue.)
    
    r? @alexcrichton -- I included one random cleanup (`Step::noop()`) that turned out to not be especially relevant. Feel free to tell me you liked it better the old way.
rustc: ./syntex-0.42.2@010-incr
find . -name '*.rs' | xargs touch
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.092; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.242; rss: 152MB	expansion
time: 0.000; rss: 152MB	maybe building test harness
time: 0.006; rss: 152MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 152MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 152MB	complete gated feature checking
time: 0.023; rss: 152MB	early lint checks
time: 0.007; rss: 152MB	AST validation
time: 0.075; rss: 166MB	name resolution
time: 0.058; rss: 200MB	lowering ast -> hir
time: 0.009; rss: 192MB	indexing hir
time: 0.006; rss: 192MB	attribute checking
time: 0.002; rss: 154MB	language item collection
time: 0.011; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.045; rss: 177MB	region resolution
time: 0.007; rss: 177MB	loop checking
time: 0.002; rss: 177MB	static item recursion checking
time: 0.381; rss: 178MB	compute_incremental_hashes_map
time: 0.000; rss: 178MB	load_dep_graph
time: 0.009; rss: 178MB	stability index
time: 0.021; rss: 182MB	stability checking
time: 0.054; rss: 190MB	type collecting
time: 0.004; rss: 190MB	variance inference
time: 0.006; rss: 193MB	impl wf inference
time: 0.026; rss: 197MB	coherence checking
time: 0.086; rss: 200MB	wf checking
time: 0.195; rss: 207MB	item-types checking
time: 3.548; rss: 266MB	item-bodies checking
time: 0.000; rss: 266MB	drop-impl checking
time: 0.213; rss: 277MB	const checking
time: 0.057; rss: 277MB	privacy checking
time: 0.019; rss: 283MB	intrinsic checking
time: 0.016; rss: 283MB	effect checking
time: 0.049; rss: 283MB	match checking
time: 0.048; rss: 291MB	liveness checking
time: 0.172; rss: 293MB	rvalue checking
time: 0.366; rss: 482MB	MIR dump
  time: 0.057; rss: 483MB	SimplifyCfg
  time: 0.075; rss: 483MB	QualifyAndPromoteConstants
  time: 0.120; rss: 500MB	TypeckMir
  time: 0.004; rss: 500MB	SimplifyBranches
  time: 0.032; rss: 500MB	SimplifyCfg
time: 0.288; rss: 500MB	MIR cleanup and validation
time: 0.472; rss: 500MB	borrow checking
time: 0.024; rss: 500MB	reachability checking
time: 0.038; rss: 500MB	death checking
time: 0.000; rss: 500MB	unused lib feature checking
time: 0.178; rss: 500MB	lint checking
time: 0.000; rss: 500MB	resolving dependency formats
  time: 0.004; rss: 500MB	NoLandingPads
  time: 0.027; rss: 500MB	SimplifyCfg
  time: 0.064; rss: 509MB	EraseRegions
  time: 0.011; rss: 509MB	AddCallGuards
  time: 0.273; rss: 531MB	ElaborateDrops
  time: 0.003; rss: 531MB	NoLandingPads
  time: 0.052; rss: 531MB	SimplifyCfg
  time: 0.028; rss: 531MB	InstCombine
  time: 0.012; rss: 531MB	Deaggregator
  time: 0.004; rss: 531MB	CopyPropagation
  time: 0.034; rss: 531MB	SimplifyLocals
  time: 0.010; rss: 531MB	AddCallGuards
  time: 0.003; rss: 531MB	PreTrans
time: 0.525; rss: 531MB	MIR optimisations
  time: 0.065; rss: 540MB	write metadata
  time: 0.395; rss: 552MB	translation item collection
  time: 0.072; rss: 554MB	codegen unit partitioning
  time: 0.053; rss: 1456MB	internalize symbols
time: 12.069; rss: 1456MB	translation
time: 0.000; rss: 1456MB	assert dep graph
time: 2.099; rss: 1484MB	serialize dep graph
incremental: re-using 0 out of 50 modules
time: 0.000; rss: 1195MB	llvm function passes [1]
time: 0.000; rss: 1197MB	llvm module passes [1]
time: 0.001; rss: 1205MB	llvm function passes [0]
time: 0.000; rss: 1207MB	llvm module passes [0]
time: 0.002; rss: 1216MB	llvm function passes [3]
time: 0.000; rss: 1216MB	llvm module passes [3]
time: 0.003; rss: 1216MB	llvm function passes [4]
time: 0.000; rss: 1216MB	llvm module passes [4]
time: 0.004; rss: 1216MB	llvm function passes [2]
time: 0.008; rss: 1216MB	codegen passes [1]
time: 0.004; rss: 1216MB	llvm module passes [2]
time: 0.001; rss: 1216MB	llvm function passes [1]
time: 0.000; rss: 1216MB	llvm module passes [1]
time: 0.009; rss: 1216MB	codegen passes [0]
time: 0.011; rss: 1216MB	llvm function passes [6]
time: 0.014; rss: 1218MB	llvm function passes [5]
time: 0.005; rss: 1218MB	llvm module passes [6]
time: 0.008; rss: 1218MB	llvm module passes [5]
time: 0.020; rss: 1224MB	codegen passes [3]
time: 0.017; rss: 1224MB	llvm function passes [10]
time: 0.024; rss: 1224MB	llvm function passes [0]
time: 0.015; rss: 1226MB	llvm function passes [3]
time: 0.008; rss: 1231MB	llvm module passes [3]
time: 0.014; rss: 1231MB	llvm module passes [0]
time: 0.023; rss: 1239MB	llvm module passes [10]
time: 0.055; rss: 1243MB	codegen passes [1]
time: 0.000; rss: 1243MB	llvm function passes [1]
time: 0.000; rss: 1243MB	llvm module passes [1]
time: 0.045; rss: 1243MB	llvm function passes [9]
time: 0.001; rss: 1243MB	codegen passes [1]
time: 0.062; rss: 1243MB	codegen passes [4]
time: 0.001; rss: 1262MB	llvm function passes [15]
time: 0.000; rss: 1262MB	llvm module passes [15]
time: 0.037; rss: 1267MB	llvm function passes [1]
time: 0.001; rss: 1269MB	llvm module passes [1]
time: 0.099; rss: 1271MB	codegen passes [2]
time: 0.000; rss: 1272MB	llvm function passes [2]
time: 0.000; rss: 1272MB	llvm module passes [2]
time: 0.004; rss: 1276MB	codegen passes [2]
time: 0.074; rss: 1278MB	llvm function passes [12]
time: 0.058; rss: 1278MB	llvm module passes [9]
time: 0.127; rss: 1278MB	llvm function passes [7]
time: 0.040; rss: 1278MB	codegen passes [15]
time: 0.000; rss: 1278MB	llvm function passes [15]
time: 0.000; rss: 1278MB	llvm module passes [15]
time: 0.011; rss: 1278MB	llvm module passes [12]
time: 0.001; rss: 1278MB	codegen passes [15]
time: 0.060; rss: 1284MB	llvm function passes [14]
time: 0.000; rss: 1284MB	llvm module passes [14]
time: 0.036; rss: 1286MB	llvm function passes [17]
time: 0.009; rss: 1286MB	llvm module passes [17]
time: 0.038; rss: 1292MB	llvm function passes [15]
time: 0.070; rss: 1292MB	codegen passes [1]
time: 0.021; rss: 1296MB	llvm module passes [15]
time: 0.047; rss: 1298MB	codegen passes [14]
time: 0.127; rss: 1299MB	llvm function passes [16]
time: 0.145; rss: 1299MB	llvm function passes [4]
time: 0.188; rss: 1298MB	llvm function passes [11]
time: 0.118; rss: 1297MB	llvm module passes [7]
time: 0.061; rss: 1294MB	llvm module passes [16]
time: 0.269; rss: 1295MB	llvm function passes [8]
time: 0.075; rss: 1295MB	llvm function passes [14]
time: 0.082; rss: 1295MB	llvm module passes [4]
time: 0.032; rss: 1293MB	llvm module passes [14]
time: 0.022; rss: 1294MB	llvm function passes [22]
time: 0.044; rss: 1298MB	llvm function passes [23]
time: 0.027; rss: 1300MB	llvm module passes [22]
time: 0.004; rss: 1300MB	llvm module passes [23]
time: 0.250; rss: 1304MB	llvm function passes [18]
time: 0.287; rss: 1304MB	llvm function passes [2]
time: 0.245; rss: 1308MB	llvm function passes [19]
time: 0.203; rss: 1305MB	llvm module passes [11]
time: 0.172; rss: 1308MB	llvm function passes [20]
time: 0.123; rss: 1310MB	llvm function passes [21]
time: 0.410; rss: 1312MB	llvm function passes [13]
time: 0.114; rss: 1315MB	llvm function passes [25]
time: 0.003; rss: 1316MB	llvm function passes [28]
time: 0.006; rss: 1317MB	llvm module passes [28]
time: 0.244; rss: 1320MB	llvm module passes [8]
time: 0.029; rss: 1319MB	llvm function passes [30]
time: 0.013; rss: 1314MB	llvm module passes [30]
time: 0.041; rss: 1314MB	llvm module passes [25]
time: 0.160; rss: 1314MB	llvm function passes [26]
time: 0.004; rss: 1315MB	llvm function passes [36]
time: 0.184; rss: 1316MB	llvm module passes [2]
time: 0.002; rss: 1316MB	llvm module passes [36]
time: 0.027; rss: 1319MB	llvm function passes [37]
time: 0.001; rss: 1320MB	llvm module passes [37]
time: 0.046; rss: 1320MB	llvm function passes [35]
time: 0.005; rss: 1322MB	llvm module passes [35]
time: 0.004; rss: 1321MB	codegen passes [37]
time: 0.489; rss: 1322MB	llvm function passes [1]
time: 0.235; rss: 1320MB	llvm module passes [21]
time: 0.113; rss: 1322MB	codegen passes [36]
time: 0.279; rss: 1323MB	llvm module passes [20]
time: 0.092; rss: 1324MB	codegen passes [39]
time: 0.334; rss: 1324MB	llvm module passes [18]
time: 0.244; rss: 1327MB	llvm function passes [33]
time: 0.217; rss: 1330MB	llvm function passes [34]
time: 0.288; rss: 1333MB	codegen passes [28]
time: 0.269; rss: 1337MB	llvm module passes [26]
time: 0.464; rss: 1338MB	llvm function passes [24]
time: 0.114; rss: 1344MB	llvm module passes [33]
time: 0.383; rss: 1345MB	llvm function passes [27]
time: 0.354; rss: 1346MB	llvm function passes [32]
time: 0.782; rss: 1349MB	codegen passes [6]
time: 0.416; rss: 1348MB	llvm function passes [31]
time: 0.286; rss: 1352MB	llvm module passes [1]
time: 0.210; rss: 1358MB	llvm module passes [34]
time: 0.123; rss: 1356MB	llvm module passes [32]
time: 0.574; rss: 1351MB	llvm function passes [29]
time: 0.140; rss: 1352MB	llvm module passes [27]
time: 0.599; rss: 1352MB	llvm module passes [19]
time: 0.183; rss: 1366MB	llvm module passes [31]
time: 0.836; rss: 1387MB	llvm module passes [13]
time: 1.109; rss: 1386MB	codegen passes [3]
time: 1.239; rss: 1389MB	codegen passes [5]
time: 0.441; rss: 1393MB	llvm module passes [29]
time: 0.846; rss: 1391MB	codegen passes [35]
time: 1.088; rss: 1394MB	codegen passes [23]
time: 0.770; rss: 1393MB	llvm module passes [24]
time: 1.472; rss: 1414MB	codegen passes [0]
time: 1.511; rss: 1410MB	codegen passes [10]
time: 1.357; rss: 1421MB	codegen passes [22]
time: 1.410; rss: 1425MB	codegen passes [30]
time: 1.997; rss: 1401MB	codegen passes [12]
time: 1.745; rss: 1414MB	codegen passes [4]
time: 1.603; rss: 1445MB	codegen passes [20]
time: 1.849; rss: 1456MB	codegen passes [25]
time: 2.610; rss: 1432MB	codegen passes [17]
time: 2.742; rss: 1418MB	codegen passes [15]
time: 1.947; rss: 1427MB	codegen passes [26]
time: 2.026; rss: 1417MB	codegen passes [33]
time: 2.307; rss: 1489MB	codegen passes [32]
time: 2.634; rss: 1501MB	codegen passes [21]
time: 3.158; rss: 1531MB	codegen passes [14]
time: 3.555; rss: 1528MB	codegen passes [9]
time: 3.048; rss: 1510MB	codegen passes [2]
time: 3.531; rss: 1630MB	codegen passes [18]
time: 3.854; rss: 1607MB	codegen passes [16]
time: 3.526; rss: 1571MB	codegen passes [27]
time: 3.794; rss: 1640MB	codegen passes [19]
time: 4.382; rss: 1599MB	codegen passes [7]
time: 3.912; rss: 1560MB	codegen passes [34]
time: 4.128; rss: 1540MB	codegen passes [1]
time: 4.765; rss: 1551MB	codegen passes [31]
time: 4.707; rss: 1500MB	codegen passes [11]
time: 4.126; rss: 1453MB	codegen passes [29]
time: 4.525; rss: 1428MB	codegen passes [24]
time: 5.272; rss: 1367MB	codegen passes [8]
time: 5.174; rss: 1305MB	codegen passes [13]
time: 8.420; rss: 1303MB	LLVM passes
time: 0.000; rss: 1303MB	serialize work products
time: 1.053; rss: 270MB	linking
done
