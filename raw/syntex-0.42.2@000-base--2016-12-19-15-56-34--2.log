commit 94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a
Merge: 3f9823d 83453bc
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 19 20:07:49 2016 +0000

    Auto merge of #38072 - nikomatsakis:bootstrap-incremental, r=acrichto
    
    add preliminary support for incremental compilation to rustbuild.py
    
    This implements the integration described in #37929. It requires the use of a local nightly as your bootstrap compiler. The setup is described in `src/bootstrap/README.md`.
    
    This does NOT implement the "copy stage0 libs to stage1" optimization described in #37929, just because that seems orthogonal to me.
    
    In local testing, I do not yet see any incremental re-use when building rustc. I'm not sure why that is, more investigation needed.
    
    (For these reasons, this is not marked as fixing the relevant issue.)
    
    r? @alexcrichton -- I included one random cleanup (`Step::noop()`) that turned out to not be especially relevant. Feel free to tell me you liked it better the old way.
rustc: ./syntex-0.42.2@000-base
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
time: 0.092; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.250; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.007; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.025; rss: 146MB	early lint checks
time: 0.008; rss: 146MB	AST validation
time: 0.080; rss: 161MB	name resolution
time: 0.066; rss: 194MB	lowering ast -> hir
time: 0.011; rss: 187MB	indexing hir
time: 0.007; rss: 187MB	attribute checking
time: 0.002; rss: 149MB	language item collection
time: 0.012; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.050; rss: 169MB	region resolution
time: 0.008; rss: 169MB	loop checking
time: 0.002; rss: 169MB	static item recursion checking
time: 0.383; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.008; rss: 171MB	stability index
time: 0.016; rss: 171MB	stability checking
time: 0.046; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.002; rss: 176MB	impl wf inference
time: 0.017; rss: 177MB	coherence checking
time: 0.084; rss: 180MB	wf checking
time: 0.183; rss: 184MB	item-types checking
time: 3.361; rss: 235MB	item-bodies checking
time: 0.000; rss: 235MB	drop-impl checking
time: 0.208; rss: 244MB	const checking
time: 0.054; rss: 244MB	privacy checking
time: 0.015; rss: 244MB	intrinsic checking
time: 0.013; rss: 244MB	effect checking
time: 0.046; rss: 244MB	match checking
time: 0.045; rss: 251MB	liveness checking
time: 0.167; rss: 252MB	rvalue checking
time: 0.515; rss: 432MB	MIR dump
  time: 0.059; rss: 437MB	SimplifyCfg
  time: 0.073; rss: 437MB	QualifyAndPromoteConstants
  time: 0.106; rss: 437MB	TypeckMir
  time: 0.004; rss: 437MB	SimplifyBranches
  time: 0.030; rss: 437MB	SimplifyCfg
time: 0.272; rss: 437MB	MIR cleanup and validation
time: 0.463; rss: 440MB	borrow checking
time: 0.024; rss: 440MB	reachability checking
time: 0.037; rss: 440MB	death checking
time: 0.000; rss: 440MB	unused lib feature checking
time: 0.172; rss: 440MB	lint checking
time: 0.000; rss: 440MB	resolving dependency formats
  time: 0.003; rss: 440MB	NoLandingPads
  time: 0.026; rss: 440MB	SimplifyCfg
  time: 0.078; rss: 446MB	EraseRegions
  time: 0.011; rss: 446MB	AddCallGuards
  time: 0.309; rss: 465MB	ElaborateDrops
  time: 0.003; rss: 465MB	NoLandingPads
  time: 0.053; rss: 465MB	SimplifyCfg
  time: 0.028; rss: 465MB	InstCombine
  time: 0.012; rss: 465MB	Deaggregator
  time: 0.002; rss: 465MB	CopyPropagation
  time: 0.035; rss: 465MB	SimplifyLocals
  time: 0.010; rss: 465MB	AddCallGuards
  time: 0.002; rss: 465MB	PreTrans
time: 0.572; rss: 465MB	MIR optimisations
  time: 0.087; rss: 473MB	write metadata
  time: 0.409; rss: 485MB	translation item collection
  time: 0.061; rss: 488MB	codegen unit partitioning
  time: 0.055; rss: 744MB	internalize symbols
time: 5.144; rss: 744MB	translation
time: 0.000; rss: 744MB	assert dep graph
time: 0.000; rss: 744MB	serialize dep graph
  time: 0.530; rss: 424MB	llvm function passes [0]
  time: 0.305; rss: 432MB	llvm module passes [0]
  time: 10.378; rss: 433MB	codegen passes [0]
  time: 0.000; rss: 433MB	codegen passes [0]
time: 12.027; rss: 433MB	LLVM passes
time: 0.000; rss: 433MB	serialize work products
time: 0.346; rss: 116MB	linking
done
