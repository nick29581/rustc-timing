commit 94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a
Merge: 3f9823d 83453bc
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 19 20:07:49 2016 +0000

    Auto merge of #38072 - nikomatsakis:bootstrap-incremental, r=acrichto
    
    add preliminary support for incremental compilation to rustbuild.py
    
    This implements the integration described in #37929. It requires the use of a local nightly as your bootstrap compiler. The setup is described in `src/bootstrap/README.md`.
    
    This does NOT implement the "copy stage0 libs to stage1" optimization described in #37929, just because that seems orthogonal to me.
    
    In local testing, I do not yet see any incremental re-use when building rustc. I'm not sure why that is, more investigation needed.
    
    (For these reasons, this is not marked as fixing the relevant issue.)
    
    r? @alexcrichton -- I included one random cleanup (`Step::noop()`) that turned out to not be especially relevant. Feel free to tell me you liked it better the old way.
rustc: ./syntex-0.42.2@010-incr
find . -name '*.rs' | xargs touch
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.092; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.242; rss: 151MB	expansion
time: 0.000; rss: 151MB	maybe building test harness
time: 0.006; rss: 151MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 151MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 151MB	complete gated feature checking
time: 0.023; rss: 151MB	early lint checks
time: 0.007; rss: 151MB	AST validation
time: 0.075; rss: 166MB	name resolution
time: 0.058; rss: 199MB	lowering ast -> hir
time: 0.010; rss: 192MB	indexing hir
time: 0.006; rss: 192MB	attribute checking
time: 0.002; rss: 154MB	language item collection
time: 0.011; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.046; rss: 177MB	region resolution
time: 0.008; rss: 177MB	loop checking
time: 0.002; rss: 177MB	static item recursion checking
time: 0.382; rss: 178MB	compute_incremental_hashes_map
time: 0.000; rss: 178MB	load_dep_graph
time: 0.009; rss: 178MB	stability index
time: 0.021; rss: 181MB	stability checking
time: 0.056; rss: 189MB	type collecting
time: 0.004; rss: 189MB	variance inference
time: 0.006; rss: 193MB	impl wf inference
time: 0.026; rss: 197MB	coherence checking
time: 0.088; rss: 200MB	wf checking
time: 0.199; rss: 208MB	item-types checking
time: 3.600; rss: 265MB	item-bodies checking
time: 0.000; rss: 265MB	drop-impl checking
time: 0.222; rss: 276MB	const checking
time: 0.065; rss: 277MB	privacy checking
time: 0.019; rss: 283MB	intrinsic checking
time: 0.014; rss: 283MB	effect checking
time: 0.048; rss: 283MB	match checking
time: 0.047; rss: 290MB	liveness checking
time: 0.172; rss: 292MB	rvalue checking
time: 0.366; rss: 482MB	MIR dump
  time: 0.058; rss: 483MB	SimplifyCfg
  time: 0.075; rss: 483MB	QualifyAndPromoteConstants
  time: 0.122; rss: 500MB	TypeckMir
  time: 0.005; rss: 500MB	SimplifyBranches
  time: 0.034; rss: 500MB	SimplifyCfg
time: 0.293; rss: 500MB	MIR cleanup and validation
time: 0.483; rss: 500MB	borrow checking
time: 0.026; rss: 500MB	reachability checking
time: 0.044; rss: 500MB	death checking
time: 0.000; rss: 500MB	unused lib feature checking
time: 0.186; rss: 500MB	lint checking
time: 0.000; rss: 500MB	resolving dependency formats
  time: 0.004; rss: 500MB	NoLandingPads
  time: 0.030; rss: 500MB	SimplifyCfg
  time: 0.073; rss: 509MB	EraseRegions
  time: 0.013; rss: 509MB	AddCallGuards
  time: 0.283; rss: 533MB	ElaborateDrops
  time: 0.004; rss: 533MB	NoLandingPads
  time: 0.057; rss: 532MB	SimplifyCfg
  time: 0.034; rss: 532MB	InstCombine
  time: 0.013; rss: 532MB	Deaggregator
  time: 0.004; rss: 532MB	CopyPropagation
  time: 0.042; rss: 532MB	SimplifyLocals
  time: 0.011; rss: 532MB	AddCallGuards
  time: 0.003; rss: 532MB	PreTrans
time: 0.570; rss: 532MB	MIR optimisations
  time: 0.079; rss: 540MB	write metadata
  time: 0.405; rss: 553MB	translation item collection
  time: 0.075; rss: 556MB	codegen unit partitioning
  time: 0.049; rss: 1457MB	internalize symbols
time: 11.866; rss: 1457MB	translation
time: 0.000; rss: 1457MB	assert dep graph
time: 1.889; rss: 1485MB	serialize dep graph
incremental: re-using 0 out of 50 modules
time: 0.000; rss: 1194MB	llvm function passes [2]
time: 0.000; rss: 1196MB	llvm module passes [2]
time: 0.001; rss: 1205MB	llvm function passes [1]
time: 0.001; rss: 1205MB	llvm function passes [0]
time: 0.000; rss: 1205MB	llvm module passes [1]
time: 0.000; rss: 1205MB	llvm module passes [0]
time: 0.002; rss: 1205MB	llvm function passes [4]
time: 0.000; rss: 1205MB	llvm module passes [4]
time: 0.002; rss: 1205MB	codegen passes [2]
time: 0.004; rss: 1205MB	llvm function passes [6]
time: 0.005; rss: 1207MB	codegen passes [1]
time: 0.002; rss: 1207MB	llvm module passes [6]
time: 0.001; rss: 1207MB	llvm function passes [1]
time: 0.000; rss: 1207MB	llvm module passes [1]
time: 0.007; rss: 1211MB	codegen passes [0]
time: 0.011; rss: 1211MB	llvm function passes [5]
time: 0.017; rss: 1217MB	llvm function passes [3]
time: 0.008; rss: 1220MB	llvm module passes [3]
time: 0.019; rss: 1220MB	llvm function passes [0]
time: 0.009; rss: 1220MB	llvm function passes [30]
time: 0.026; rss: 1220MB	llvm function passes [29]
time: 0.005; rss: 1220MB	llvm module passes [30]
time: 0.008; rss: 1220MB	llvm module passes [0]
time: 0.035; rss: 1228MB	llvm module passes [5]
time: 0.000; rss: 1236MB	llvm function passes [31]
time: 0.000; rss: 1236MB	llvm module passes [31]
time: 0.003; rss: 1236MB	llvm function passes [8]
time: 0.001; rss: 1236MB	llvm module passes [8]
time: 0.021; rss: 1236MB	llvm module passes [29]
time: 0.009; rss: 1241MB	codegen passes [31]
time: 0.054; rss: 1247MB	codegen passes [1]
time: 0.060; rss: 1249MB	codegen passes [4]
time: 0.000; rss: 1249MB	llvm function passes [4]
time: 0.000; rss: 1249MB	llvm module passes [4]
time: 0.004; rss: 1249MB	codegen passes [4]
time: 0.000; rss: 1258MB	llvm function passes [37]
time: 0.000; rss: 1258MB	llvm module passes [37]
time: 0.001; rss: 1258MB	codegen passes [37]
time: 0.090; rss: 1260MB	codegen passes [6]
time: 0.058; rss: 1269MB	llvm function passes [1]
time: 0.000; rss: 1269MB	llvm module passes [1]
time: 0.050; rss: 1269MB	llvm function passes [9]
time: 0.051; rss: 1269MB	llvm function passes [10]
time: 0.134; rss: 1269MB	llvm function passes [2]
time: 0.092; rss: 1269MB	llvm function passes [33]
time: 0.015; rss: 1269MB	codegen passes [1]
time: 0.016; rss: 1271MB	llvm module passes [9]
time: 0.011; rss: 1269MB	llvm module passes [33]
time: 0.097; rss: 1271MB	llvm function passes [31]
time: 0.092; rss: 1271MB	llvm function passes [36]
time: 0.000; rss: 1271MB	llvm module passes [36]
time: 0.108; rss: 1276MB	codegen passes [8]
time: 0.170; rss: 1282MB	llvm function passes [7]
time: 0.030; rss: 1282MB	llvm module passes [31]
time: 0.021; rss: 1282MB	llvm function passes [40]
time: 0.031; rss: 1284MB	codegen passes [36]
time: 0.024; rss: 1271MB	llvm module passes [10]
time: 0.014; rss: 1284MB	llvm module passes [40]
time: 0.045; rss: 1284MB	llvm function passes [39]
time: 0.073; rss: 1284MB	llvm module passes [2]
time: 0.059; rss: 1296MB	llvm function passes [13]
time: 0.043; rss: 1301MB	llvm module passes [39]
time: 0.019; rss: 1300MB	llvm module passes [13]
time: 0.197; rss: 1302MB	llvm function passes [35]
time: 0.123; rss: 1304MB	llvm function passes [11]
time: 0.269; rss: 1304MB	llvm function passes [28]
time: 0.098; rss: 1308MB	llvm module passes [7]
time: 0.125; rss: 1313MB	llvm function passes [12]
time: 0.281; rss: 1313MB	llvm function passes [32]
time: 0.008; rss: 1313MB	llvm module passes [12]
time: 0.126; rss: 1315MB	llvm function passes [41]
time: 0.004; rss: 1311MB	llvm function passes [21]
time: 0.000; rss: 1311MB	llvm function passes [23]
time: 0.000; rss: 1311MB	llvm module passes [23]
time: 0.005; rss: 1311MB	codegen passes [23]
time: 0.028; rss: 1311MB	llvm module passes [41]
time: 0.069; rss: 1311MB	llvm module passes [11]
time: 0.220; rss: 1317MB	llvm function passes [1]
time: 0.065; rss: 1340MB	llvm module passes [21]
time: 0.150; rss: 1340MB	llvm function passes [42]
time: 0.002; rss: 1340MB	llvm module passes [42]
time: 0.307; rss: 1340MB	llvm function passes [4]
time: 0.154; rss: 1357MB	llvm module passes [35]
time: 0.331; rss: 1363MB	llvm function passes [37]
time: 0.081; rss: 1374MB	llvm module passes [1]
time: 0.151; rss: 1376MB	llvm function passes [19]
time: 0.061; rss: 1380MB	codegen passes [42]
time: 0.159; rss: 1380MB	llvm module passes [32]
time: 0.015; rss: 1380MB	llvm module passes [19]
time: 0.077; rss: 1372MB	llvm module passes [37]
time: 0.377; rss: 1372MB	llvm function passes [38]
time: 0.229; rss: 1372MB	llvm module passes [28]
time: 0.474; rss: 1374MB	llvm function passes [34]
time: 0.215; rss: 1374MB	llvm function passes [22]
time: 0.005; rss: 1374MB	llvm module passes [22]
time: 0.000; rss: 1374MB	codegen passes [14]
time: 0.225; rss: 1373MB	llvm function passes [16]
time: 0.445; rss: 1375MB	llvm function passes [6]
time: 0.013; rss: 1373MB	llvm module passes [16]
time: 0.071; rss: 1375MB	llvm module passes [38]
time: 0.429; rss: 1375MB	llvm function passes [36]
time: 0.078; rss: 1375MB	llvm module passes [6]
time: 0.392; rss: 1375MB	llvm function passes [15]
time: 0.287; rss: 1369MB	llvm module passes [4]
time: 0.392; rss: 1368MB	llvm function passes [18]
time: 0.396; rss: 1370MB	llvm function passes [20]
time: 0.476; rss: 1369MB	codegen passes [40]
time: 0.479; rss: 1383MB	llvm function passes [17]
time: 0.232; rss: 1386MB	llvm module passes [36]
time: 0.247; rss: 1395MB	llvm module passes [18]
time: 0.312; rss: 1394MB	llvm module passes [15]
time: 0.474; rss: 1393MB	codegen passes [21]
time: 0.875; rss: 1397MB	codegen passes [5]
time: 0.363; rss: 1407MB	llvm module passes [20]
time: 0.967; rss: 1408MB	llvm function passes [8]
time: 0.334; rss: 1411MB	llvm module passes [17]
time: 0.746; rss: 1423MB	llvm module passes [34]
time: 0.687; rss: 1434MB	codegen passes [22]
time: 1.373; rss: 1449MB	codegen passes [3]
time: 1.017; rss: 1442MB	codegen passes [12]
time: 1.457; rss: 1445MB	codegen passes [0]
time: 0.537; rss: 1442MB	llvm module passes [8]
time: 1.068; rss: 1438MB	codegen passes [16]
time: 1.956; rss: 1463MB	codegen passes [30]
time: 1.724; rss: 1463MB	codegen passes [39]
time: 1.802; rss: 1442MB	codegen passes [33]
time: 2.032; rss: 1430MB	codegen passes [29]
time: 2.032; rss: 1459MB	codegen passes [19]
time: 2.212; rss: 1454MB	codegen passes [31]
time: 2.136; rss: 1451MB	codegen passes [41]
time: 2.180; rss: 1441MB	codegen passes [10]
time: 2.431; rss: 1438MB	codegen passes [9]
time: 2.414; rss: 1422MB	codegen passes [13]
time: 2.124; rss: 1475MB	codegen passes [18]
time: 2.752; rss: 1510MB	codegen passes [11]
time: 2.931; rss: 1531MB	codegen passes [1]
time: 2.610; rss: 1521MB	codegen passes [4]
time: 3.312; rss: 1519MB	codegen passes [7]
time: 3.175; rss: 1597MB	codegen passes [15]
time: 3.952; rss: 1642MB	codegen passes [35]
time: 3.777; rss: 1604MB	codegen passes [37]
time: 4.174; rss: 1653MB	codegen passes [38]
time: 3.822; rss: 1606MB	codegen passes [20]
time: 4.242; rss: 1579MB	codegen passes [2]
time: 4.268; rss: 1556MB	codegen passes [6]
time: 4.414; rss: 1567MB	codegen passes [17]
time: 4.457; rss: 1507MB	codegen passes [36]
time: 4.719; rss: 1498MB	codegen passes [28]
time: 4.894; rss: 1429MB	codegen passes [32]
time: 4.572; rss: 1385MB	codegen passes [8]
time: 5.528; rss: 1325MB	codegen passes [34]
time: 8.827; rss: 1325MB	LLVM passes
time: 0.000; rss: 1322MB	serialize work products
time: 1.047; rss: 301MB	linking
done
